<?php
namespace aura\di;

/**
 * Test class for Config.
 * Generated by PHPUnit on 2010-09-21 at 17:51:31.
 */
class ConfigTest extends \PHPUnit_Framework_TestCase
{
    protected $config;
    
    protected function setUp()
    {
        parent::setUp();
        $this->config = new Config(new \ArrayObject);
    }
    
    public function testFetchReadsConstructorDefaults()
    {
        $expect = array('foo' => 'bar');
        $actual = $this->config->fetch('aura\di\MockParentClass');
        $this->assertSame($expect, $actual);
    }
    
    /**
     * coverage for the "merged already" portion of the fetch() method
     */
    public function testFetchTwiceForMerge()
    {
        $expect = $this->config->fetch('aura\di\MockParentClass');
        $actual = $this->config->fetch('aura\di\MockParentClass');
        $this->assertSame($expect, $actual);
    }
    
    public function testFetchCapturesParentParams()
    {
        $expect = array(
            'foo' => 'bar',
            'zim' => null,
        );
        
        $actual = $this->config->fetch('aura\di\MockChildClass');
        $this->assertSame($expect, $actual);
    }
    
    public function testFetchCapturesExplicitConfig()
    {
        $this->config = new Config(new \ArrayObject(array(
            'aura\di\MockParentClass' => array('foo' => 'zim')
        )));
        
        $expect = array('foo' => 'zim');
        $actual = $this->config->fetch('aura\di\MockParentClass');
        $this->assertSame($expect, $actual);
    }
    
    public function testFetchHonorsExplicitParentConfig()
    {
        $this->config = new Config(new \ArrayObject(array(
            'aura\di\MockParentClass' => array('foo' => 'dib'),
        )));
        
        $expect = array(
            'foo' => 'dib',
            'zim' => null,
        );
        
        $actual = $this->config->fetch('aura\di\MockChildClass');
        $this->assertSame($expect, $actual);
        
        // for test coverage of the mock class
        $child = new \aura\di\MockChildClass('bar', new \aura\di\MockOtherClass);
    }
    
    /**
     * @todo Implement testGetReflection().
     */
    public function testGetReflection()
    {
        $actual = $this->config->getReflect('aura\di\MockOtherClass');
        $this->assertType('ReflectionClass', $actual);
        $this->assertSame('aura\di\MockOtherClass', $actual->getName());
        $actual = $this->config->getReflect('aura\di\MockOtherClass');
    }
    
}
